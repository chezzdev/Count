#!/bin/sh

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=fastcgi-daemon2
DESC=fastcgi-daemon2
PID_DIR="/var/run/fastcgi2"
PIDFILE=${PID_DIR}/${NAME}-init.pid
FASTCGI_USER="www-data"

CONFIG_DIR="/etc/fastcgi2/available"
CHECK_DIR="/etc/fastcgi2/check"
POSTSTART_DIR="/etc/fastcgi2/poststart"
POSTSTOP_DIR="/etc/fastcgi2/poststop"

if ! [ -d $PID_DIR ] ; then
    mkdir -p $PID_DIR
    chown ${FASTCGI_USER}.${FASTCGI_USER} $PID_DIR
    chmod 775 $PID_DIR
fi

FASTCGI_LIST=`ls $CONFIG_DIR | awk -F. /.*\.conf$/'{print $1}'`

DELAY=0
MODULE_LIST=""
COMMAND=$1

shift 1
for i in $*
do
    case $i in
        --delay=*)
            DELAY=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        ;;
        *)
            if [ "$MODULE_LIST" ]; then
                MODULE_LIST=$MODULE_LIST" $i"
            else
                MODULE_LIST="$i"
            fi
        ;;
    esac
done

module_list() {
    if [ "$MODULE_LIST" ]; then
        case "$MODULE_LIST" in
            [aA][lL][lL])
            ;;
            *)
                FASTCGI_LIST="$MODULE_LIST"
            ;;
        esac
    else
        if [ "$1" != "status" ] && [ "$1" != "start" ]; then
            echo "Usage: $0 $1 <applications list>|all"
            exit 1
        fi
    fi
}

start() {
    echo "Starting FastCgi Application: "
    for FASTCGI in $FASTCGI_LIST; do
        echo "Name: $FASTCGI"
        if start-stop-daemon --quiet --stop --signal 0 --pidfile $PID_DIR/fastcgistart2.$FASTCGI.pid 2>/dev/null 1>/dev/null; then
            echo "$FASTCGI is already running."
            EXIT_STATUS=1
        else
        if [ -r /etc/fastcgi2/available/$FASTCGI.start ]; then
            . /etc/fastcgi2/available/$FASTCGI.start
        fi
        su $FASTCGI_USER -c "/sbin/start-stop-daemon --start --background --verbose --name $NAME --exec /usr/bin/fastcgistart2.sh $FASTCGI"
        if [ $? != 0 ]; then
            echo "Error: Cannot start /usr/bin/fastcgistart2.sh"
            EXIT_STATUS=1
        fi

        if [ "x$1" = "x" ]; then
            #Poststart script inittialize
            if [ -x $POSTSTART_DIR/$FASTCGI.sh ]; then
                echo "Poststart file for $FASTCGI executing"
                $POSTSTART_DIR/$FASTCGI.sh
            else
                echo "Warning: poststart script for $FASTCGI not found"
            fi
        fi
        echo "."
        fi
    done
    return 0
}

stop() {
    echo "Stopping FastCgi Application: "
    for FASTCGI in $FASTCGI_LIST; do
        if ! [ -s $PID_DIR/$FASTCGI.pid ]; then
            echo Warning: there is $FASTCGI.conf, but there is no $PID_DIR/$FASTCGI.pid
            continue
        fi
        echo "Name: $FASTCGI"

        if start-stop-daemon --quiet --stop --signal 0 --pidfile $PID_DIR/fastcgistart2.$FASTCGI.pid 2>&1 >/dev/null || start-stop-daemon --quiet --stop --signal 0 --pidfile $PID_DIR/$FASTCGI.pid 2>&1 >/dev/null; then 
            start-stop-daemon --quiet --signal 15 --stop --pidfile $PID_DIR/fastcgistart2.$FASTCGI.pid 2>&1 >/dev/null
            start-stop-daemon --quiet --signal 15 --stop --pidfile $PID_DIR/$FASTCGI.pid 2>&1 >/dev/null
            for i in `seq 1 30`; do
                if start-stop-daemon --quiet --stop --signal 0 --pidfile $PID_DIR/fastcgistart2.$FASTCGI.pid 2>&1 >/dev/null || start-stop-daemon --quiet --stop --signal 0 --pidfile $PID_DIR/$FASTCGI.pid 2>&1 >/dev/null; then
                    kill9=1
                    echo -n "."
                    sleep 1
                else
                    kill9=0
                    break
                fi
            done
            if  [ $kill9 -ne 0  ]; then
                start-stop-daemon --quiet --signal 9 --stop --pidfile $PID_DIR/fastcgistart2.$FASTCGI.pid 2>&1 >/dev/null
                start-stop-daemon --quiet --signal 9 --stop --pidfile $PID_DIR/$FASTCGI.pid 2>&1 >/dev/null
                echo "Sended kill -9"
            fi
        else
            echo "Stoped."
        fi
        echo "Stopping $FASTCGI done"
        if [ "x$1" = "x" ]; then
            if [ -x $POSTSTOP_DIR/$FASTCGI.sh ]; then
                echo "Poststop file for $FASTCGI executing"
                $POSTSTOP_DIR/$FASTCGI.sh
            else
                echo "Warning: poststop script for $FASTCGI not found"
            fi
        fi
        #Rm pid files
        rm /var/run/fastcgi2/$FASTCGI.pid  >/dev/null
    done
    echo ""
    return 0
}

status_short(){
	#Check fastcgidaemon status
	if [ -x $CHECK_DIR/$1.sh ]; then
    	    if $CHECK_DIR/$1.sh; then
		    echo "$1 is running"
		    return 0
	    fi
	#Check pid
    	    pid=`ps ax  | grep  $1 | grep -v grep | grep fastcgidaemon2 | awk '{print $1}'`
	    if [ "$pid" != "" ] ; then
	    	    echo "$1 process is found, but service don't avaible"
	    	    return 0
	    fi

	    # Next try "/var/run/*.pid" files
	    if [ -f $PID_DIR/fastcgi2.$1.pid ] ; then
	        pid=`head -1 $PID_DIR/fastcgistart2.$1.pid`
	        if [ "$pid" != "" ] ; then
	            echo "$1 dead but pid file exists"
	            return 1
		    fi
	    fi
	else
	    echo "$CHECK_DIR/$1.sh not found or not executable. ps aufx check only"
    	    pid=`ps ax  | grep  $1 | grep -v grep | grep fastcgistart2.sh | awk '{print $1}'`
	    if [ "$pid" != "" ] ; then
	    	    echo "$1 is running"
	    	    return 0
	    fi

	    # Next try "/var/run/*.pid" files
	    if [ -f $PID_DIR/fastcgi2.$1.pid ] ; then
	        pid=`head -1 /var/run/fastcgi2/fastcgistart2.$1.pid`
	        if [ "$pid" != "" ] ; then
	            echo "$1 dead but pid file exists"
	            return 1
		    fi
	    fi
	fi	    
	
	echo "$1 is stopped"
	return 3
}

EXIT_STATUS=0

case "$COMMAND" in
    start)
        module_list $COMMAND
        start
        exit $EXIT_STATUS
    ;;
    stop)
        module_list $COMMAND
        stop
    ;;

    restart)
        module_list $COMMAND
	    stop
	    start
        exit $EXIT_STATUS
	;;
    fast-restart)
        module_list $COMMAND
        stop  fast
	    start fast
        exit $EXIT_STATUS
    ;;
    status)
        module_list $COMMAND
        for FASTCGI in $FASTCGI_LIST; do
            status_short "$FASTCGI"
        done
    ;;

    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|restart|fast-restart|status}" >&2
        exit 1
    ;;
esac

exit 0
